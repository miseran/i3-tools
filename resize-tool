#!/usr/bin/env python3

import i3ipc
import sys

conn = i3ipc.Connection()

tree = conn.get_tree()


def resize(direction, amount):
	"""
	Resize the current container along to the given direction.
	If there is only a single container, resize by adjusting gaps.
	If the direction is "natural", resize vertically in a splitv container, else
	horizontally. If it is "orhtogonal", do the opposite.
	"""
	if direction not in [
			"natural", "orthogonal", "horizontal", "vertical",
			"top", "bottom", "left", "right",
			]:
		usage()

	try:
		amount = int(amount)
	except ValueError:
		print("Bad resize amount given.")
		exit(1)

	node = tree.find_focused()

	single = True
	vertical = False

	# Check if there is only a single leaf.
	# If not, check if the curent container is in a vertical split.
	while True:
		parent = node.parent
		if node.type == "workspace" or not parent:
			break
		elif parent.type == "floating_con":
			single = False
			break
		elif len(parent.nodes) > 1 and parent.layout == "splith":
			single = False
			break
		elif len(parent.nodes) > 1 and parent.layout == "splitv":
			single = False
			vertical = True
			break
		node = parent

	if single:
		if direction == "natural":
			direction = "horizontal"
		elif direction == "orthogonal":
			direction = "vertical"

		if amount < 0:
			mode = "plus"
			amount = -amount
		else:
			mode = "minus"

		conn.command(f"gaps {direction} current {mode} {amount}")

	else:
		if direction == "horizontal":
			direction = "width"
		elif direction == "vertical":
			direction = "height"
		elif direction == "natural":
			direction = "height" if vertical else "width"
		elif direction == "orthogonal":
			direction = "width" if vertical else "height"
		elif direction == "top":
			direction = "up"
		elif direction == "bottom":
			direction = "down"

		if amount < 0:
			mode = "shrink"
			amount = -amount
		else:
			mode = "grow"

		conn.command(f"resize {mode} {direction} {amount} px or {amount//16} ppt")


def usage():
	print("Usage: resize_tool DIRECTION AMOUNT")
	print("DIRECTON can be: top, bottom, left, right,")
	print("                 horizontal, vertical, natural, orthogonal")
	exit(1)


if __name__ == "__main__":
	if len(sys.argv) != 3:
		usage()
	resize(*sys.argv[1:])
